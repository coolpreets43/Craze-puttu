package com.cts.iterate;

import java.io.File;
import java.io.FileOutputStream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
//import com.cts.iterate.FolderIterator;
public class Xmltoexcel {
  public boolean generateExcel(File xmlDocument,String fName,String appNAME[],int count) {
		System.out.println("In generateExcel .....");
		
		HSSFWorkbook wb = new HSSFWorkbook();
		
		for(int i=0;i<count-1;i++)
		{
			HSSFSheet spreadSheet = wb.createSheet(appNAME[i]);
			createexcel(spreadSheet,wb,xmlDocument,fName,appNAME[i]);

		}

	
        return true;
		
	}
        public boolean createexcel(HSSFSheet spreadSheet,HSSFWorkbook wb,File xmlDocument,String fName,String appNAME)
        {
        	
		spreadSheet.setColumnWidth((short) 1, (short) (256 * 50));
        spreadSheet.setColumnWidth((short) 2, (short) (256 * 20));
        spreadSheet.setColumnWidth((short) 3, (short) (256 * 30));
        spreadSheet.setColumnWidth((short) 4, (short) (256 * 20));
        spreadSheet.setColumnWidth((short) 5, (short) (256 * 20));
        spreadSheet.setColumnWidth((short) 6, (short) (256 * 20));
        spreadSheet.setColumnWidth((short) 7, (short) (256 * 40));
        spreadSheet.setColumnWidth((short) 8, (short) (256 * 40));

       


        

		HSSFRow row0 = spreadSheet.createRow(0);
		HSSFCell cell0 = row0.createCell((short) 3);
		cell0.setCellValue(appNAME);
		
		HSSFRow row1 = spreadSheet.createRow(1);
		HSSFCell cell = row1.createCell((short) 1);
		cell.setCellValue("Package name");
		HSSFCellStyle cellStyle = wb.createCellStyle();
        cellStyle.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cell.setCellStyle(cellStyle);
		
		
		
		cell = row1.createCell((short) 2);
		cell.setCellValue("Classes");
		
        cellStyle.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cell.setCellStyle(cellStyle);
		

		cell = row1.createCell((short) 3);
		cell.setCellValue("Methods");
		
        cellStyle.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cell.setCellStyle(cellStyle);
		
		cell = row1.createCell((short) 4);
		cell.setCellValue("NCSS");
		
        cellStyle.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cell.setCellStyle(cellStyle);
		
		cell = row1.createCell((short) 5);
		cell.setCellValue("Java Doc");
		
        cellStyle.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cell.setCellStyle(cellStyle);
		
		cell = row1.createCell((short) 6);
		cell.setCellValue("Number of Javadoc lines");
		
        cellStyle.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cell.setCellStyle(cellStyle);
		
		cell = row1.createCell((short) 7);
		cell.setCellValue("single_comment_lines");
		
        cellStyle.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cell.setCellStyle(cellStyle);
		
		
		cell = row1.createCell((short) 8);
		cell.setCellValue("multi_comment_lines");
		
        cellStyle.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cell.setCellStyle(cellStyle);
		HSSFRow row = null;
		
		

		try {

			
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(xmlDocument);
			doc.getDocumentElement().normalize();

			
			NodeList nList = doc.getElementsByTagName("package");
			

			for (int temp = 0; temp < nList.getLength(); temp++) {
				int j = temp+2;
				row = spreadSheet.createRow(j);
				
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					
					Element eElement = (Element) nNode;
					
					System.out.println("Name : "
							+ getTagValue("name", eElement));
					row.createCell((short) 1).setCellValue(
							getTagValue("name", eElement));
					
					
			System.out.println("classes : "
							+ getTagValue("classes", eElement));
					row.createCell((short) 2).setCellValue(
							getTagValue("classes", eElement));
					
					
					
					row.createCell((short) 3).setCellValue(
							getTagValue("functions", eElement));
					
					
					row.createCell((short) 4).setCellValue(
							getTagValue("ncss", eElement));
					
					
					row.createCell((short) 5).setCellValue(
							getTagValue("javadocs", eElement));
					
					
					row.createCell((short) 6).setCellValue(
							getTagValue("javadoc_lines", eElement));
					
					
					
				
					row.createCell((short) 7).setCellValue(
							getTagValue("single_comment_lines", eElement));
					
					
					row.createCell((short) 8).setCellValue(
							getTagValue("multi_comment_lines", eElement));
					
				}
			}
			FileOutputStream output = new FileOutputStream(
					new File(fName));
			wb.write(output);
			output.flush();
			output.close();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
        	}
        	
		
	
	private static String getTagValue(String sTag, Element eElement) {
		NodeList nlList = eElement.getElementsByTagName(sTag).item(0)
				.getChildNodes();

		Node nValue = (Node) nlList.item(0);

		return nValue.getNodeValue();
	}

}
